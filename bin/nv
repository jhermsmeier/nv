#!/usr/bin/env node
var argv = process.argv.slice( 2 )
var os = require( 'os' )
var path = require( 'path' )
var fs = require( 'fs' )

var NODE_MIRROR = process.env['NODE_MIRROR'] ||
  'https://nodejs.org/dist/'

var N_PREFIX = process.env.N_PREFIX || (
  process.platform === 'win32' ?
    process.env['LOCALAPPDATA'] :
    '/usr/local'
)

var BASE_VERSIONS_DIR = path.join( N_PREFIX, 'n', 'versions' )

function usage() {
  var extname = process.platform === 'win32' ? '.exe' : undefined
  var bin = path.basename( process.argv[1], extname )
  var USAGE = [
    '',
    '  Usage: $0 [options] [command] [args]',
    '',
    '  Commands:',
    '',
    '    $0 <version>               Activate node <version>',
    '    $0 i <version>             Install node <version>',
    '    $0 latest                  Install or activate the latest node release',
    '    $0 -a x86 latest           As above but force 32 bit architecture',
    '    $0 stable                  Install or activate the latest stable node release',
    '    $0 lts                     Install or activate the latest LTS node release',
    '    $0 ls                      Output versions installed',
    '    $0 versions                Output the versions of node available',
    '    $0 bin <version>           Output bin path for <version>',
    '    $0 rm <version ...>        Remove the given version(s)',
    '    $0 prune                   Remove all versions except the current version',
    '',
    '  Options:',
    '',
    '    -v, --version     Output current version of $0',
    '    -h, --help        Display help information',
    '    -a, --arch        Override system architecture',
    '',
  ]
  return USAGE.join( os.EOL ).replace( /\$0/g, bin )
}

function includes( array, value ) {
  return !!~array.indexOf( value )
}

if( includes( argv, '--help' ) || includes( argv, '-h' ) ) {
  process.stdout.write( usage() )
  process.exit( 0 )
}

if( includes( argv, '--version' ) || includes( argv, '-v' ) ) {
  process.stdout.write( require( '../package.json' ).version )
  process.stdout.write( os.EOL )
  process.exit( 0 )
}

function hideCursor() {
  if( !process.stdout.isTTY ) return;
  process.stdout.write( '\u001b[?25l' )
}

function showCursor() {
  if( !process.stdout.isTTY ) return;
  process.stdout.write( '\u001b[?25h' )
}

function eraseLine() {
  if( !process.stdout.isTTY ) return;
  process.stdout.write( '\u001b[1A\u001b[2K' )
}

function fullscreen() {
  if( !process.stdout.isTTY ) return;
  process.stdout.write( '\u001b[?1049h' )
}

function leaveFullscreen() {
  if( !process.stdout.isTTY ) return;
  process.stdout.write( '\u001b[?1049l' )
}

function pad( value, length ) {
  while( value.length < length ) {
    value = ' ' + value
  }
  return value
}

function log( label, value ) {
  process.stdout.write(
    '  \u001b[36m' + pad( label, 10 ) +
    '\u001b[0m : \u001b[2m' + value +
    '\u001b[22m\u001b[0m' + os.EOL
  )
}

function logError( error ) {
  process.stdout.write(
    os.EOL + '  \u001b[31m' + pad( 'error', 10 ) +
    '\u001b[0m : \u001b[2m' + ( process.env['DEBUG'] ? error.stack : error ) +
    '\u001b[22m\u001b[0m' + os.EOL
  )
}

function onError( error ) {
  logError( error )
  process.exit( 1 )
}

function onExit() {
  // leaveFullscreen()
  showCursor()
}

process.on( 'uncaughtException', onError )
process.on( 'exit', onExit )

// fullscreen()
// hideCursor()

function getArchitecture() {
  if( process.arch == 'arm' ) {
    var arch = require( 'child_process' ).execSync( 'uname -m' ).toString().trim()
    getArchitecture = function() { return arch }
    return arch
  }
  return process.arch
}

function archiveUrl( version, platform, arch, format ) {

  platform = platform || ( platform === 'win32' ? 'win' : platform )
  format = format || ( platform === 'win' ? '.zip' : '.tar.gz' )
  arch = arch || getArchitecture()

  return NODE_MIRROR + 'v' + version + '/node-v' + version + '-' + platform + '-' + arch + format

}

function checksumUrl( version ) {
  return NODE_MIRROR + 'v' + version + '/SHASUMS256.txt'
}

function getCurrentVersion( callback ) {
  // When bundled, `pkg` assumes self as "node", so we need an absolute path
  var which = process.platform === 'win32' ? 'where node' : 'which node'
  var childProcess = require( 'child_process' )

  var node = childProcess.exec( which, function( error, stdout, stderr ) {

    if( error ) {
      return callback( error )
    }

    var node = stdout.toString().trim()
    var argv = [ '-e', 'console.log(JSON.stringify({ version: process.versions.node, arch: process.arch }))' ]

    childProcess.execFile( node, argv, function( error, stdout, stderr ) {

      var info = null

      if( error ) {
        return callback( error )
      }

      try { info = JSON.parse( stdout ) } catch( error ) {
        return callback( error )
      }

      callback( null, info )

    })

  })

}

function getRemoteVersions( callback ) {

  var url = require( 'url' )
  var https = require( 'https' )
  var zlib = require( 'zlib' )

  var options = url.parse( 'https://nodejs.org/dist/index.json' )

  options.headers = { 'Accept-Encoding': 'gzip' }

  var req = https.get( options, function( res ) {

    var data = ''

    res = res.pipe( zlib.createGunzip() )

    res.setEncoding( 'utf8' )

    res.on( 'readable', function() {
      var chunk = ''
      while( chunk = this.read() ) {
        data += chunk
      }
    })

    res.once( 'end', function() {
      callback( null, JSON.parse( data ) )
    })

  })

  req.on( 'error', callback )

}

function getPlatform() {
  switch( process.platform ) {
    case 'darwin': return 'osx'
    case 'win32': return 'win'
    default: return process.platform
  }
}

function getReleaseAssetTuple( platform ) {
  platform = platform || process.platform
  switch( platform ) {
    case 'darwin': return getPlatform() + '-' + getArchitecture() + '-tar'
    case 'win32': return getPlatform() + '-' + getArchitecture() + '-zip'
    default: return getPlatform() + '-' + getArchitecture()
  }
}

function hasAsset( tuple, release ) {
  return release.files.some( function( asset ) {
    return asset === tuple
  })
}

function listRemoteVersions() {

  var semver = require( 'semver' )

  getRemoteVersions( function( error, releases ) {

    if( error ) {
      process.exitCode = 1
      return logError( error )
    }

    var tuple = getReleaseAssetTuple()
    var applicable = releases.filter( function( release ) {
      return hasAsset( tuple, release )
    })

    getCurrentVersion( function( error, current ) {
      getLocalVersions( function( error, localVersions ) {
        process.stdout.write( os.EOL )
        applicable.sort( function( a, b ) {
          return semver.compare( a.version, b.version )
        }).forEach( function( release ) {
          var version = release.version.replace( /^v/, '' )
          if( version === current.version ) {
            process.stdout.write( '  \u001b[36mo\u001b[0m ' + version + '\u001b[0m' + os.EOL )
          } else if( includes( localVersions, version ) ) {
            process.stdout.write( '    ' + version + os.EOL )
          } else {
            process.stdout.write( '    \u001b[2m' + version + '\u001b[22m' + os.EOL )
          }
        })
      })
    })

  })

}

function getLocalVersions( callback ) {

  var semver = require( 'semver' )
  var dirname = path.join( BASE_VERSIONS_DIR, 'node' )

  return fs.readdir( dirname, function( error, ls ) {

    if( error && error.code === 'ENOENT' ) {
      return callback( null, [] )
    } else if( error ) {
      return callback( error )
    }

    var versions = ls.filter( function( version ) {
      return /^\d+\.\d+\.\d+$/.test( version )
    })
    .sort( semver.compare )

    callback( null, versions )

  })

}

function listLocalVersions() {
  getCurrentVersion( function( error, current ) {
    getLocalVersions( function( error, localVersions ) {
      process.stdout.write( os.EOL )
      localVersions.forEach( function( version ) {
        version === current.version ?
          process.stdout.write( '  \u001b[36mo\u001b[0m ' + version + '\u001b[0m' + os.EOL ) :
          process.stdout.write( '    \u001b[2m' + version + '\u001b[22m' + os.EOL )
      })
    })
  })
}

function getChecksums( version, callback ) {

  var https = require( 'https' )
  var url = checksumUrl( version )

  var req = https.get( url, function( res ) {

    if( res.statusCode !== 200 ) {
      res.destroy()
      // process.stdout.write( `  error : ${res.statusMessage}${os.EOL}` )
      logError( res.statusMessage )
      return callback( new Error( 'HTTP ' + res.statusCode + ': ' + res.statusMessage ) )
    }

    var data = ''

    res.setEncoding( 'utf8' )

    res.on( 'readable', function() {
      var chunk = ''
      while( chunk = this.read() ) data += chunk
    })

    res.once( 'end', function() {
      var checksums = {}
      data.trim().split( /\r?\n/g ).forEach( function( line ) {
        var parts = line.split( /\s+/ )
        if( parts.length === 2 ) {
          checksums[ parts[1] ] = parts[0]
        }
      })
      callback( null, checksums )
    })

  })

}

function install( version, platform, arch, callback ) {

  version = version.replace( /^v/, '' )

  var https = require( 'https' )
  var zlib = require( 'zlib' )
  var crypto = require( 'crypto' )
  var stream = require( 'readable-stream' )
  var tar = require( 'tar-stream' )
  var archive = archiveUrl( version, platform, arch )

  process.stdout.write( os.EOL )

  log( 'install', 'node-v' + version )
  log( 'fetch', archive )

  var checksum = new stream.Transform({
    transform: function( chunk, _, next ) {
      this.hash.write( chunk )
      next( null, chunk )
    },
    flush: function( done ) {
      var self = this
      this.hash.on( 'readable', function() {
        var hash = self.hash.read()
        if( hash ) self.emit( 'hash', hash )
      })
      // this.hash.end()
    }
  })

  checksum.hash = crypto.createHash( 'sha256' )

  checksum.on( 'hash', function( hash ) {
    var checksum = hash.toString( 'hex' )
    var filename = path.basename( archive )
    log( 'fetch', 'SHASUMS256' )
    getChecksums( version, function( error, checksums ) {
      if( checksum === checksums[ filename ] ) {
        log( 'checksum', hash.toString( 'hex' ) )
      } else {
        logError( 'Checksum mismatch' )
      }
    })
  })

  var req = https.get( archive, function( res ) {

    if( res.statusCode !== 200 ) {
      res.destroy()
      logError( res.statusMessage )
      return callback( new Error( 'HTTP ' + res.statusCode + ': ' + res.statusMessage ) )
    }

    var target = path.join( BASE_VERSIONS_DIR, 'node', version )
    var extract = tar.extract()
    var archiveRoot = null

    log( 'extract', '' )

    extract.on( 'entry', function( stats, stream, next ) {

      archiveRoot = archiveRoot || stats.name.split( '/' ).shift()

      var relative = path.relative( archiveRoot, stats.name )
      var filename = path.join( target, relative )

      if( stats.type === 'directory' ) {
        eraseLine()
        log( 'mkdir', path.basename( relative ) )
        try {
          fs.mkdirSync( filename, stats.mode )
        } catch( error ) {
          if( error.code !== 'EEXIST' )
            return callback( error )
        }
        stream.on( 'end', next )
        stream.resume()
      } else if( stats.type === 'file' || stats.type === 'contiguous-file' ) {
        eraseLine()
        log( 'extract', path.basename( relative ) )
        var writeStream = fs.createWriteStream( filename, {
          mode: stats.mode,
        })
        stream.pipe( writeStream )
          .on( 'finish', next )
      } else if( stats.type === 'symlink' ) {
        eraseLine()
        log( 'symlink', path.basename( relative ) )
        try {
          fs.symlinkSync( path.join( path.dirname( filename ), stats.linkname ), filename )
        } catch( error ) {
          if( error.code !== 'EEXIST' )
            return callback( error )
        }
        stream.on( 'end', next )
        stream.resume()
      } else if( stats.type === 'link' ) {
        eraseLine()
        log( 'link', path.basename( relative ) )
        try {
          fs.linkSync( path.join( path.dirname( filename ), stats.linkname ), filename )
        } catch( error ) {
          if( error.code !== 'EEXIST' )
            return callback( error )
        }
        stream.on( 'end', next )
        stream.resume()
      } else {
        // log( 'type', stats.type )
        stream.on( 'end', next )
        stream.resume()
      }

    })

    function destroy( error ) {
      req.abort()
      res.destroy( error )
    }

    // FIXME: Never fires (?!?!)
    // extract.on( 'finish', callback )

    // FIXME: Workaround for the above
    res.on( 'end', function() {
      setTimeout( callback, 500 )
    })

    res.on( 'error', callback )
      .pipe( checksum )
      .on( 'error', destroy )
      .pipe( zlib.createGunzip() )
      .on( 'error', destroy )
      .pipe( extract )
      .on( 'error', destroy )

  })

  req.on( 'error', callback )

}

function activate( version, platform, arch ) {

  getCurrentVersion( function( error, current ) {

    var currentBins = fs.readdirSync( path.join( BASE_VERSIONS_DIR, 'node', current.version, 'bin' ) )

    // process.stdout.write( os.EOL )
    // log( 'unlink', '' )

    currentBins.forEach( function( bin ) {
      var filename = path.join( N_PREFIX, 'bin', bin )
      // eraseLine()
      // log( 'unlink', filename )
      fs.unlinkSync( filename )
    })

    process.stdout.write( os.EOL )
    log( 'activate', 'node-v' + version )
    process.stdout.write( os.EOL )

    var newBins = fs.readdirSync( path.join( BASE_VERSIONS_DIR, 'node', version, 'bin' ) )

    newBins.forEach( function( bin ) {
      var target = path.join( N_PREFIX, 'bin', bin )
      var filename = path.join( BASE_VERSIONS_DIR, 'node', version, 'bin', bin )
      // eraseLine()
      // NOTE: `node` needs hard linking, as otherwise
      // npm's global root would point to N_PREFIX.
      // This also avoids having to allow Node
      // through the firewall repeatedly.
      if( bin === 'node' ) {
        log( 'link', target + ' -> ' + filename )
        fs.linkSync( filename, target )
      } else {
        // NOTE: This probably won't work on Windows (?)
        log( 'symlink', target + ' -> ' + filename )
        fs.symlinkSync( filename, target )
      }
    })

  })

}

function parseArgv( args ) {

  args = args.slice()

  var semver = require( 'semver' )
  var argv = { _: [] }
  var value = null

  if( semver.coerce( args[ args.length - 1 ] ) ) {
    argv.version = new semver.Range( args.pop() )
  }

  if( !semver.coerce( args[0] ) ) {
    argv.command = args[0] && args[0][0] !== '-' && args.shift()
  }

  while( value = args.shift() ) {
    switch( value ) {
      case '-a': case '--arch': argv.arch = args.shift(); break
      case '--quiet': argv.quiet = true; break
      case '--download': argv.download = true; break
      case '--lts': argv.lts = true; break
      case '--latest': argv.latest = true; break
      case '--stable': argv.stable = true; break
      default: argv._.push( value ); break
    }
  }

  return argv

}

function installCommand( argv ) {
  var semver = require( 'semver' )
  getRemoteVersions( function( error, data ) {
    if( error ) {
      process.exitCode = 1
      return logError( error )
    }
    var versions = data.map( function( release ) { return release.version })
    var version = semver.maxSatisfying( versions, argv.version )
    if( version ) {
      version = version.replace( /^v/, '' )
      getLocalVersions( function( error, localVersions ) {
        if( localVersions.indexOf( version ) !== -1 ) {
          activate( version, process.platform, argv.arch || getArchitecture() )
        } else {
          install( version, process.platform, argv.arch || getArchitecture(), function( error ) {
            if( error ) {
              process.exitCode = 1
              return logError( error )
            }
            activate( version, process.platform, argv.arch || getArchitecture() )
          })
        }
      })
    } else {
      logError( 'No version for ' + argv.version.range )
    }
  })
}

function activateCommand( argv ) {
  var semver = require( 'semver' )
  getLocalVersions( function( error, versions ) {
    var version = semver.maxSatisfying( versions, argv.version )
    if( version ) {
      version = version.replace( /^v/, '' )
      if( versions.indexOf( version ) !== -1 ) {
        activate( version, process.platform, argv.arch || getArchitecture() )
      } else {
        logError( 'No local version for ' + argv.version.range )
      }
    } else {
      logError( 'No local version for ' + argv.version.range )
    }
  })
}

argv = parseArgv( argv )
// console.log( argv )

switch( argv.command ) {
  case 'i': return installCommand( argv )
  case 'install': return installCommand( argv )
  case 'ls': return listLocalVersions()
  case 'rm': return remove()
  case 'prune': return prune()
  case 'bin': return bin()
  case 'versions': return listRemoteVersions()
  case 'latest': return installLatest()
  case 'stable': return installStable()
  case 'lts': return installLTS()
}

// If no command is given, but a version number is, parse it as a
// range and select the highest matching version from the remote
if( !argv.command && argv.version ) {
  activateCommand( argv )
} else {
  getCurrentVersion( function( error, current ) {
    if( error ) return logError( error )
    process.stdout.write( os.EOL )
    log( 'active', current.version + ' (' + current.arch + ')' )
  })
}
